<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OctKun&#39;s Blog</title>
  
  <subtitle>前端开发</subtitle>
  <link href="https://blog.octkun.top/atom.xml" rel="self"/>
  
  <link href="https://blog.octkun.top/"/>
  <updated>2023-06-14T14:34:50.874Z</updated>
  <id>https://blog.octkun.top/</id>
  
  <author>
    <name>OctKun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript 防抖与节流</title>
    <link href="https://blog.octkun.top/2023/05/18/debounce-and-throttle/"/>
    <id>https://blog.octkun.top/2023/05/18/debounce-and-throttle/</id>
    <published>2023-05-18T13:52:01.000Z</published>
    <updated>2023-06-14T14:34:50.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>防抖和节流是前端开发中常用的两种技术，用于解决事件处理和资源请求等方面的性能问题。在前端开发中，由于事件和资源的处理需要时间，因此防抖和节流可以有效地减少不必要的并发和处理时间，提高页面性能和响应速度。举个例子，滚动事件的触发频率是很高的，假如你想在滚动时执行一个函数，防抖和节流可以控制函数触发的频率，可以极大的提高页面性能和响应速度。</p><h2 id="什么是防抖（debounce）-？"><a href="#什么是防抖（debounce）-？" class="headerlink" title="什么是防抖（debounce） ？"></a>什么是防抖（debounce） ？</h2><p>防抖是一种事件处理技术，用于限制事件处理程序的执行次数，它通过在事件触发后延迟执行事件处理程序，以避免重复执行。防抖常常用于处理频繁触发的事件，例如点击、滚动等。（这句话不够准确，请继续往下看）</p><p>想象一下你在电梯里，电梯正好要关门了，突然又有一个人过来，电梯再次打开门等待人上电梯，电梯并不会立马关门换层，而是延迟了它的功能（在楼层之间移动），但优化了资源</p><p>自己试试吧。在按钮上方单击或移动鼠标：<br><raw></p><iframe height="370" style="width: 100%;" scrolling="no" title="Debounce. Trailing" src="https://codepen.io/dcorb/embed/KVxGqN?default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/dcorb/pen/KVxGqN">  Debounce. Trailing</a> by Corbacho (<a href="https://codepen.io/dcorb">@dcorb</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><endraw><p>你可能会发现鼠标一直在点击或者移动的话，目标事件就不会触发，因为它一直在延迟，为什么函数不立即执行，使其表现得与原始的非防抖函数完全一样呢，然后后续的防抖阈值时间内触发的函数就不再执行。</p><p>下面就是一个立即执行的示例</p><p><img src="https://cdn.jsdelivr.net/gh/ChenKun1997/image@master/images/debounce-leading.png" alt="debounce-leading"></p><raw><iframe height="370" style="width: 100%;" scrolling="no" title="Debounce. Leading" src="https://codepen.io/dcorb/embed/GZWqNV?default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/dcorb/pen/GZWqNV">  Debounce. Leading</a> by Corbacho (<a href="https://codepen.io/dcorb">@dcorb</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><endraw><h2 id="防抖实现"><a href="#防抖实现" class="headerlink" title="防抖实现"></a>防抖实现</h2><p>延迟执行版</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, timeout = <span class="number">500</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, timeout);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>立即执行版</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, timeout = <span class="number">500</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    <span class="keyword">if</span> (!timer) func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, timeout);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并版</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait = <span class="number">500</span>, immediate = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    <span class="keyword">if</span> (immediate &amp;&amp; !timeout) func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (!immediate) func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, wait);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是节流-throttle-？"><a href="#什么是节流-throttle-？" class="headerlink" title="什么是节流 (throttle) ？"></a>什么是节流 (throttle) ？</h2><p>节流（throttle）是一种限制函数调用频率的技术。和防抖类似，节流也是为了优化性能，避免某些函数被频繁调用，导致页面卡顿或者浏览器崩溃。</p><p>和防抖之间的主要区别是节流保证定期执行函数，至少每X毫秒执行一次。</p><p>一个常见的例子，一个可以向下无限滚动的页面(例如小红书)，需要检查用户离底部还有多远，如果接近底部，需要发送请求获取后续的内容，如果这里使用防抖的话就不合适了。<br><raw></p><iframe height="541.1428833007812" style="width: 100%;" scrolling="no" title="Infinite scrolling throttled" src="https://codepen.io/dcorb/embed/eJLMxa?default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/dcorb/pen/eJLMxa">  Infinite scrolling throttled</a> by Corbacho (<a href="https://codepen.io/dcorb">@dcorb</a>)  on <a href="https://codepen.io">CodePen</a>.</iframe><endraw><h2 id="节流实现"><a href="#节流实现" class="headerlink" title="节流实现"></a>节流实现</h2><p>时间戳版</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait = <span class="number">500</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - previous &gt; wait) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      previous = now;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定时器版</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, wait = <span class="number">500</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timeout;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        timeout = <span class="literal">null</span>;</span><br><span class="line">        func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以比较两个方法：</p><p>第一种事件会立刻执行，第二种事件会在 n 秒后第一次执行<br>第一种事件停止触发后没有办法再执行事件，第二种事件停止触发后依然会再执行一次事件</p><p>双剑合璧版<br>这个实现方式与基本版的实现非常相似，但是增加了一个计时器，用于更加精确地控制时间间隔。具体来说，当函数被调用时，它会记录上次执行的时间和当前时间的差值，然后根据差值来判断是否需要立即执行函数。如果时间间隔大于指定的时间间隔，那么立即执行函数并更新上次执行的时间；否则，通过计时器延迟执行函数并更新上次执行的时间。</p><p>这种实现方式可以更加精确地控制函数执行的时间间隔，避免出现累计误差。但是需要注意的是，这种实现方式可能会导致函数被延迟执行，具体取决于计时器的精度和浏览器的性能等因素</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, interval = <span class="number">500</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">    <span class="keyword">const</span> timeDiff = currentTime - lastTime;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    <span class="keyword">if</span> (timeDiff &gt;= interval) &#123;</span><br><span class="line">      func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      lastTime = currentTime;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        lastTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span><br><span class="line">      &#125;, interval - timeDiff);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://css-tricks.com/debouncing-throttling-explained-examples/">Debouncing and Throttling Explained Through Examples</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/22">JavaScript专题之跟着underscore学防抖</a></li><li><a href="https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore">You-Dont-Need-Lodash-Underscore</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;防抖和节流是前端开发中常用的两种技术，用于解决事件处理和资源请求等方面的性能问题。在前端开发中，由于事件和资源的处理需要时间，因此防抖和节流</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://blog.octkun.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="https://blog.octkun.top/tags/JavaScript/"/>
    
    <category term="debounce" scheme="https://blog.octkun.top/tags/debounce/"/>
    
    <category term="throttle" scheme="https://blog.octkun.top/tags/throttle/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.octkun.top/2023/05/18/hello-world/"/>
    <id>https://blog.octkun.top/2023/05/18/hello-world/</id>
    <published>2023-05-17T21:59:11.194Z</published>
    <updated>2023-05-28T15:20:32.676Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-ne</summary>
      
    
    
    
    
  </entry>
  
</feed>
